//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith Template.
//
//     Creater: Administrator
//     Date:    2014/10/21
//     Time:    16:54
//     Version: 4.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

/// <summary>
/// CodeSmith自动生成的实体
/// </summary>
namespace ZNLCRM.Entity.DBModel
{
    using System;
    using MySoft.Data;
    using ZNLCRM.Utility;
    using ZNLFrame.Entity;
    /// <summary>
    /// 表名：Sys_ReportElements 主键列：RptEleID
    /// </summary>
    [SerializableAttribute()]
    public partial class Sys_ReportElements : BaseEntity
    {
        #region Private Properties

        private Int32 _RptEleID;
        private Guid? _RptEleGuID;
        private Guid? _RptSectionGuID;
        private Guid? _SysRptGuID;
        private String _EleType;
        private Int32? _EleTop;
        private Int32? _EleLeft;
        private Int32? _Width;
        private Int32? _Height;
        private String _Font;
        private String _ShapType;
        private String _BordersEdge;
        private String _BackColor;
        private String _Text;
        private Boolean? _Wrap;
        private String _ImgSrc;
        private byte[] _ImgData;
        private String _ListDataSource;
        private String _InfoDataSource;
        private String _DataProperty;
        private Boolean? _IsDeleted;

        #endregion

        #region Public Properties

        /// <summary>
        /// .
        /// </summary>
        public Int32 RptEleID
        {
            get
            {
                return _RptEleID;
            }
            set
            {
                this.OnPropertyValueChange(_.RptEleID, _RptEleID, value);
                this._RptEleID = value;
            }
        }

        /// <summary>
        /// 元素GUID.
        /// </summary>
        public Guid? RptEleGuID
        {
            get
            {
                return this._RptEleGuID;
            }
            set
            {
                this.OnPropertyValueChange(_.RptEleGuID, _RptEleGuID, value);
                this._RptEleGuID = value;
            }
        }

        /// <summary>
        /// 所在带区guid.
        /// </summary>
        public Guid? RptSectionGuID
        {
            get
            {
                return this._RptSectionGuID;
            }
            set
            {
                this.OnPropertyValueChange(_.RptSectionGuID, _RptSectionGuID, value);
                this._RptSectionGuID = value;
            }
        }

        /// <summary>
        /// 所属报表GUID.
        /// </summary>
        public Guid? SysRptGuID
        {
            get
            {
                return this._SysRptGuID;
            }
            set
            {
                this.OnPropertyValueChange(_.SysRptGuID, _SysRptGuID, value);
                this._SysRptGuID = value;
            }
        }

        /// <summary>
        /// 元素类型(Text,Img,Rectangle,Grid).
        /// </summary>
        public String EleType
        {
            get
            {
                return this._EleType;
            }
            set
            {
                this.OnPropertyValueChange(_.EleType, _EleType, value);
                this._EleType = value.SubStr(50);
            }
        }

        /// <summary>
        /// 元素显示X坐标.
        /// </summary>
        public Int32? EleTop
        {
            get
            {
                return this._EleTop;
            }
            set
            {
                this.OnPropertyValueChange(_.EleTop, _EleTop, value);
                this._EleTop = value;
            }
        }

        /// <summary>
        /// 元素显示Y坐标.
        /// </summary>
        public Int32? EleLeft
        {
            get
            {
                return this._EleLeft;
            }
            set
            {
                this.OnPropertyValueChange(_.EleLeft, _EleLeft, value);
                this._EleLeft = value;
            }
        }

        /// <summary>
        /// 元素宽度.
        /// </summary>
        public Int32? Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                this.OnPropertyValueChange(_.Width, _Width, value);
                this._Width = value;
            }
        }

        /// <summary>
        /// 元素高度.
        /// </summary>
        public Int32? Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                this.OnPropertyValueChange(_.Height, _Height, value);
                this._Height = value;
            }
        }

        /// <summary>
        /// 字体,(格式如:黑体,16,Bold,Red).
        /// </summary>
        public String Font
        {
            get
            {
                return this._Font;
            }
            set
            {
                this.OnPropertyValueChange(_.Font, _Font, value);
                this._Font = value.SubStr(300);
            }
        }

        /// <summary>
        /// 形状态类型(Rectangle,暂时只有矩形).
        /// </summary>
        public String ShapType
        {
            get
            {
                return this._ShapType;
            }
            set
            {
                this.OnPropertyValueChange(_.ShapType, _ShapType, value);
                this._ShapType = value.SubStr(30);
            }
        }

        /// <summary>
        /// 画边线控制(FourEdge,Left,Right,Top,Bottom,DiagonalDown,DiagonalUp).
        /// </summary>
        public String BordersEdge
        {
            get
            {
                return this._BordersEdge;
            }
            set
            {
                this.OnPropertyValueChange(_.BordersEdge, _BordersEdge, value);
                this._BordersEdge = value.SubStr(30);
            }
        }

        /// <summary>
        /// 背景色.
        /// </summary>
        public String BackColor
        {
            get
            {
                return this._BackColor;
            }
            set
            {
                this.OnPropertyValueChange(_.BackColor, _BackColor, value);
                this._BackColor = value.SubStr(20);
            }
        }

        /// <summary>
        /// 显示文本.
        /// </summary>
        public String Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                this.OnPropertyValueChange(_.Text, _Text, value);
                this._Text = value.SubStr(1000);
            }
        }

        /// <summary>
        /// 是否换行.
        /// </summary>
        public Boolean? Wrap
        {
            get
            {
                return this._Wrap;
            }
            set
            {
                this.OnPropertyValueChange(_.Wrap, _Wrap, value);
                this._Wrap = value;
            }
        }

        /// <summary>
        /// .
        /// </summary>
        public String ImgSrc
        {
            get
            {
                return this._ImgSrc;
            }
            set
            {
                this.OnPropertyValueChange(_.ImgSrc, _ImgSrc, value);
                this._ImgSrc = value.SubStr(300);
            }
        }

        /// <summary>
        /// .
        /// </summary>
        public byte[] ImgData
        {
            get
            {
                return this._ImgData;
            }
            set
            {
                this.OnPropertyValueChange(_.ImgData, _ImgData, value);
                this._ImgData = value;
            }
        }

        /// <summary>
        /// 绑定数据源(List集合类).
        /// </summary>
        public String ListDataSource
        {
            get
            {
                return this._ListDataSource;
            }
            set
            {
                this.OnPropertyValueChange(_.ListDataSource, _ListDataSource, value);
                this._ListDataSource = value.SubStr(300);
            }
        }

        /// <summary>
        /// 绑定数据源(元素类).
        /// </summary>
        public String InfoDataSource
        {
            get
            {
                return this._InfoDataSource;
            }
            set
            {
                this.OnPropertyValueChange(_.InfoDataSource, _InfoDataSource, value);
                this._InfoDataSource = value.SubStr(300);
            }
        }

        /// <summary>
        /// 绑定属性值.
        /// </summary>
        public String DataProperty
        {
            get
            {
                return this._DataProperty;
            }
            set
            {
                this.OnPropertyValueChange(_.DataProperty, _DataProperty, value);
                this._DataProperty = value.SubStr(100);
            }
        }

        /// <summary>
        /// 是否删除(0:正常,1:已删除).
        /// </summary>
        public Boolean? IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }
            set
            {
                this.OnPropertyValueChange(_.IsDeleted, _IsDeleted, value);
                this._IsDeleted = value;
            }
        }

        #endregion
        /// <summary>
        /// 获取实体对应的表名
        /// </summary>
        protected override Table GetTable()
        {
            return new Table<Sys_ReportElements>("Sys_ReportElements");
        }

        /// <summary>
        /// 获取实体中的标识列
        /// </summary>
        protected override Field GetIdentityField()
        {
            return _.RptEleID;
        }

        /// <summary>
        /// 获取实体中的主键列
        /// </summary>
        protected override Field[] GetPrimaryKeyFields()
        {
            return new Field[] {
				_.RptEleID
			};
        }

        /// <summary>
        /// 获取列信息
        /// </summary>
        protected override Field[] GetFields()
        {
            return new Field[] {
				_.RptEleID,		
				_.RptEleGuID,		
				_.RptSectionGuID,		
				_.SysRptGuID,		
				_.EleType,		
				_.EleTop,		
				_.EleLeft,		
				_.Width,		
				_.Height,		
				_.Font,		
				_.ShapType,		
				_.BordersEdge,		
				_.BackColor,		
				_.Text,		
				_.Wrap,		
				_.ImgSrc,		
				_.ImgData,		
				_.ListDataSource,		
				_.InfoDataSource,		
				_.DataProperty,		
				_.IsDeleted		
			};
        }

        /// <summary>
        /// 获取列数据
        /// </summary>
        protected override object[] GetValues()
        {
            return new object[] {
				this._RptEleID,		
				this._RptEleGuID,		
				this._RptSectionGuID,		
				this._SysRptGuID,		
				this._EleType,		
				this._EleTop,		
				this._EleLeft,		
				this._Width,		
				this._Height,		
				this._Font,		
				this._ShapType,		
				this._BordersEdge,		
				this._BackColor,		
				this._Text,		
				this._Wrap,		
				this._ImgSrc,		
				this._ImgData,		
				this._ListDataSource,		
				this._InfoDataSource,		
				this._DataProperty,		
				this._IsDeleted		
			};
        }

        /// <summary>
        /// 给当前实体赋值
        /// </summary>
        protected override void SetValues(IRowReader reader)
        {
            if ((false == reader.IsDBNull(_.RptEleID)))
            {
                this._RptEleID = reader.GetInt32(_.RptEleID);
            }
            if ((false == reader.IsDBNull(_.RptEleGuID)))
            {
                this._RptEleGuID = reader.GetGuid(_.RptEleGuID);
            }
            if ((false == reader.IsDBNull(_.RptSectionGuID)))
            {
                this._RptSectionGuID = reader.GetGuid(_.RptSectionGuID);
            }
            if ((false == reader.IsDBNull(_.SysRptGuID)))
            {
                this._SysRptGuID = reader.GetGuid(_.SysRptGuID);
            }
            if ((false == reader.IsDBNull(_.EleType)))
            {
                this._EleType = reader.GetString(_.EleType);
            }
            if ((false == reader.IsDBNull(_.EleTop)))
            {
                this._EleTop = reader.GetInt32(_.EleTop);
            }
            if ((false == reader.IsDBNull(_.EleLeft)))
            {
                this._EleLeft = reader.GetInt32(_.EleLeft);
            }
            if ((false == reader.IsDBNull(_.Width)))
            {
                this._Width = reader.GetInt32(_.Width);
            }
            if ((false == reader.IsDBNull(_.Height)))
            {
                this._Height = reader.GetInt32(_.Height);
            }
            if ((false == reader.IsDBNull(_.Font)))
            {
                this._Font = reader.GetString(_.Font);
            }
            if ((false == reader.IsDBNull(_.ShapType)))
            {
                this._ShapType = reader.GetString(_.ShapType);
            }
            if ((false == reader.IsDBNull(_.BordersEdge)))
            {
                this._BordersEdge = reader.GetString(_.BordersEdge);
            }
            if ((false == reader.IsDBNull(_.BackColor)))
            {
                this._BackColor = reader.GetString(_.BackColor);
            }
            if ((false == reader.IsDBNull(_.Text)))
            {
                this._Text = reader.GetString(_.Text);
            }
            if ((false == reader.IsDBNull(_.Wrap)))
            {
                this._Wrap = reader.GetBoolean(_.Wrap);
            }
            if ((false == reader.IsDBNull(_.ImgSrc)))
            {
                this._ImgSrc = reader.GetString(_.ImgSrc);
            }
            if ((false == reader.IsDBNull(_.ImgData)))
            {
                this._ImgData = reader.GetBytes(_.ImgData);
            }
            if ((false == reader.IsDBNull(_.ListDataSource)))
            {
                this._ListDataSource = reader.GetString(_.ListDataSource);
            }
            if ((false == reader.IsDBNull(_.InfoDataSource)))
            {
                this._InfoDataSource = reader.GetString(_.InfoDataSource);
            }
            if ((false == reader.IsDBNull(_.DataProperty)))
            {
                this._DataProperty = reader.GetString(_.DataProperty);
            }
            if ((false == reader.IsDBNull(_.IsDeleted)))
            {
                this._IsDeleted = reader.GetBoolean(_.IsDeleted);
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if ((obj == null))
            {
                return false;
            }
            if ((false == typeof(Sys_ReportElements).IsAssignableFrom(obj.GetType())))
            {
                return false;
            }
            if ((((object)(this)) == ((object)(obj))))
            {
                return true;
            }
            return false;
        }

        public class _
        {

            /// <summary>
            /// 表示选择所有列，与*等同
            /// </summary>
            public static AllField All = new AllField<Sys_ReportElements>();

            /// <summary>
            ///  - 字段名：RptEleID - 数据类型：Int32?
            /// </summary>
            public static Field RptEleID = new Field<Sys_ReportElements>("RptEleID");
            /// <summary>
            /// 元素GUID - 字段名：RptEleGuID - 数据类型：Guid?
            /// </summary>
            public static Field RptEleGuID = new Field<Sys_ReportElements>("RptEleGuID");
            /// <summary>
            /// 所在带区guid - 字段名：RptSectionGuID - 数据类型：Guid?
            /// </summary>
            public static Field RptSectionGuID = new Field<Sys_ReportElements>("RptSectionGuID");
            /// <summary>
            /// 所属报表GUID - 字段名：SysRptGuID - 数据类型：Guid?
            /// </summary>
            public static Field SysRptGuID = new Field<Sys_ReportElements>("SysRptGuID");
            /// <summary>
            /// 元素类型(Text,Img,Rectangle,Grid) - 字段名：EleType - 数据类型：String
            /// </summary>
            public static Field EleType = new Field<Sys_ReportElements>("EleType");
            /// <summary>
            /// 元素显示X坐标 - 字段名：EleTop - 数据类型：Int32?
            /// </summary>
            public static Field EleTop = new Field<Sys_ReportElements>("EleTop");
            /// <summary>
            /// 元素显示Y坐标 - 字段名：EleLeft - 数据类型：Int32?
            /// </summary>
            public static Field EleLeft = new Field<Sys_ReportElements>("EleLeft");
            /// <summary>
            /// 元素宽度 - 字段名：Width - 数据类型：Int32?
            /// </summary>
            public static Field Width = new Field<Sys_ReportElements>("Width");
            /// <summary>
            /// 元素高度 - 字段名：Height - 数据类型：Int32?
            /// </summary>
            public static Field Height = new Field<Sys_ReportElements>("Height");
            /// <summary>
            /// 字体,(格式如:黑体,16,Bold,Red) - 字段名：Font - 数据类型：String
            /// </summary>
            public static Field Font = new Field<Sys_ReportElements>("Font");
            /// <summary>
            /// 形状态类型(Rectangle,暂时只有矩形) - 字段名：ShapType - 数据类型：String
            /// </summary>
            public static Field ShapType = new Field<Sys_ReportElements>("ShapType");
            /// <summary>
            /// 画边线控制(FourEdge,Left,Right,Top,Bottom,DiagonalDown,DiagonalUp) - 字段名：BordersEdge - 数据类型：String
            /// </summary>
            public static Field BordersEdge = new Field<Sys_ReportElements>("BordersEdge");
            /// <summary>
            /// 背景色 - 字段名：BackColor - 数据类型：String
            /// </summary>
            public static Field BackColor = new Field<Sys_ReportElements>("BackColor");
            /// <summary>
            /// 显示文本 - 字段名：Text - 数据类型：String
            /// </summary>
            public static Field Text = new Field<Sys_ReportElements>("Text");
            /// <summary>
            /// 是否换行 - 字段名：Wrap - 数据类型：Boolean?
            /// </summary>
            public static Field Wrap = new Field<Sys_ReportElements>("Wrap");
            /// <summary>
            ///  - 字段名：ImgSrc - 数据类型：String
            /// </summary>
            public static Field ImgSrc = new Field<Sys_ReportElements>("ImgSrc");
            /// <summary>
            ///  - 字段名：ImgData - 数据类型：byte[]
            /// </summary>
            public static Field ImgData = new Field<Sys_ReportElements>("ImgData");
            /// <summary>
            /// 绑定数据源(List集合类) - 字段名：ListDataSource - 数据类型：String
            /// </summary>
            public static Field ListDataSource = new Field<Sys_ReportElements>("ListDataSource");
            /// <summary>
            /// 绑定数据源(元素类) - 字段名：InfoDataSource - 数据类型：String
            /// </summary>
            public static Field InfoDataSource = new Field<Sys_ReportElements>("InfoDataSource");
            /// <summary>
            /// 绑定属性值 - 字段名：DataProperty - 数据类型：String
            /// </summary>
            public static Field DataProperty = new Field<Sys_ReportElements>("DataProperty");
            /// <summary>
            /// 是否删除(0:正常,1:已删除) - 字段名：IsDeleted - 数据类型：Boolean?
            /// </summary>
            public static Field IsDeleted = new Field<Sys_ReportElements>("IsDeleted");
        }
    }
}
